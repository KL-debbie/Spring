 SL11_SECURITY2_JDBC
 
1. tbl_board
 member
 
2. 스프링 시큐리티 , 인증/권한
 인 메모리 인증 방식
		 <security:user-service>
 				<security:user name="nana" authorities="ROLE_USER" password="{noop}4321"/>
 				<security:user name="admin" authorities="ROLE_USER, ROLE_MANAGER, ROLE_ADMIN" password="{noop}4321"/>
 		</security:user-service>  	
 		
JDBC 연동 인증방식 

3. 스프링 시큐리티의 회원 테이블
create table users
(
	username varchar2(50) not null primary key  -- userid
	, password varchar2(50) not null
	, enabled char(1) default '1'
)

create table authorities
(
	username varchar2(50) not null
	, authority varchar2(50) not null
	, constraint fk_??  foreign key(username) references users(username)
)


4. security_context.xml 수정
<security:jdbc-user-service data-source-ref="dataSource"/>추가

5. 기존 테이블 member 사용 + member_authorities 테이블 생성
1 )member
id > username
pwd > password
enabled > 컬럼 추가
alter table member
add(enabled char(1) default '1');

2) member 테이블의 id컬럼 pk
alter table member
add constraint pk_member_id primary key(id);

3 ) authorities (권한) 테이블 생성
  CREATE TABLE member_authorities(
   username     varchar2(50) not null      
  , authority    varchar2(50) not null 
  , constraint fk_member_authorities_username   FOREIGN KEY(username)  REFERENCES member(id)
);


6. PasswordEncoder 임시 사용 X {noop}
1) member 테이블의 pwd컬럼 사이즈 수정
2) 스프링에서 제공하는  passwordEncoder 빈 등록 설정

 
 ㄱ.  <bean  id="bCryptPasswordEncoder" class="org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder"></bean>
  
 ㄴ.  <security:authentication-manager> 
   		<security:authentication-provider>
 			<security:jdbc-user-service data-source-ref="dataSource"
 			users-by-username-query="SELECT id AS USERNAME, pwd AS PASSWORD, enabled FROM member WHERE id = ?"
 			authorities-by-username-query="SELECT username AS userid, authority AS auth FROM member_authorities WHERE username = ?  "
 			/>		
 ㄷ.		<security:password-encoder ref="bCryptPasswordEncoder" />
   		</security:authentication-provider>
   </security:authentication-manager>


3) joincontroller 수정

	@Autowired
	private PasswordEncoder passwordEncoder;

	@PostMapping("/join.htm")
	public String join(MemberVO member) throws Exception{
		String pwd = member.getPwd();
		member.setPwd(	this.passwordEncoder.encode(pwd) );
		this.memberDao.insert(member);
		return "redirect:../index.htm";

join.jsp  <input type="hidden" name="${_csrf.parameterName}" value="${_csrf.token }"> 확인

4) 회원가입 페이지 계정 추가
msms
admin
hong
		
5) 권한 부여
		INSERT INTO member_authorities VALUES ( 'admin' , 'ROLE_MANAGER' );
      INSERT INTO member_authorities VALUES ( 'admin' , 'ROLE_ADMIN' );
      INSERT INTO member_authorities VALUES ( 'admin' , 'ROLE_USER' );
      
      INSERT INTO member_authorities VALUES ( 'kenik' , 'ROLE_MANAGER' );
      INSERT INTO member_authorities VALUES ( 'kenik' , 'ROLE_USER' );
      
      INSERT INTO member_authorities VALUES ( 'hong' , 'ROLE_USER' );
      COMMIT;