 SL11_SECURITY3
↔⬆↔

1.

인증관리자(AutheticationManager)
	⬆
제공관리자(PM) ↔ 인증제공자(AP) ↔ UDS
					인증처리객체		인증정보객체
										직접 구현	

2. UserDetailsService 구현하는 방법

3. 어떤 인증받은 추가정보를 저장할 지 결정 
	MemberVO + 추가 정보 필드
	AuthVO.java 권한정보				

4. 인증 받은 정보를 저장 -  DB 코딩 추가/수정
	MemberMapper.java
	MemberMapper.xml
	
		
<!-- 	//회원 + 권한 정보 얻어오기 -->
<!-- 	public MemberVO read(@Param("userid") String userid) throws ClassNotFoundException, SQLException; -->
	<select id="read" resultType="">
		SELECT id, pwd, name, enabled, regdate, authority
		FROM member  m LEFT JOIN member_authorities auth ON m.id=auth.username
		WHERE m.id = #{userid}
	

5. org.doit.ik.security.CustomUserDetailsService 직접 구현
오버라이딩
UserDetails loadUserByUserName(String username)
	username == member tbl id 값
	로그인한 회원 정보 select 작업
	MemberVO 객체 생성 > UserDetails타입으로 변환	
	
	org.doit.ik.security.domain.CustomerUser 생성
	UserDetails  클래스 타입으로 반환

6. security-context.xml 
CustomUserDetailsService 설정

7. 실습
1) noticeReg.jsp글쓰기 로그인 정보 출력 코딩 추가
2) 글 쓰기 작성자 > 로그인 사용자 설정 CustomerController noticeReg.post
3) 수정, 삭제



===========================================

447p 웹 소켓 서버 구현 지원

1. html5 - API : 웹소켓(WebSocket)
2. 웹소켓
- http 프로토콜
- 웹 브라우저  <-> 웹서버 양방향 통신
- 실시간 알림, 채팅, 웹 기반 실시간 협업 기구

3. 자바의 웹 소켓 표준(JSR-356)에 맞춰 웹 소켓 서버 기능을 구현할 경우
Front Controller, 스프링 빈 객체 사용 X > 클래스 제공

컨트롤러를 구현한 것과 비슷한 방식으로 서버를 구현가능
- WebSocketHandler 클래스
- SockJS 연동 : 웹소켓 사용불가시 연동

4. 설정 pom.xml